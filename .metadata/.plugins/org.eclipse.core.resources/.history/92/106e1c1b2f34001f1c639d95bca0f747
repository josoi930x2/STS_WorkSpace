package net.datasa.web2.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import lombok.extern.slf4j.Slf4j;
import net.datasa.web2.domain.Cal;
import net.datasa.web2.domain.CalcDTO;
import net.datasa.web2.service.CalcService;

@Controller
@RequestMapping("/ex")
@Slf4j
public class CalcController {
	
	// 필요한 객체를 타입으로 찾아서 주입
	@Autowired
	CalcService calService;
	
	@GetMapping("calc")
	public String calc() {
		return "calcView/calc1";
	}
	
	@GetMapping("input3")
	public String input3(
			/*
			 * RequestParam 
			 * 요청의 쿼리 파라미터나 폼 데이터에서 
			 * 데이터를 추출해 해당 값을 바로 메소드 파라미터에 할당
			 */
			@RequestParam (name="num1") int n1,
			// 바로 int로 받는 것은 위험할 수 있음 
			// -> String n1으로 받고 if문 등을 이용해 정수인지 체크
			@RequestParam (name="num2") int n2,
			@RequestParam (name="op") String op
						) {
		log.debug("n1:{}, op:{}, n2={}", n1, op, n2);
		return "redirect:/";
	}
	
	@GetMapping("calc2")
	public String calc2() {
		return "calcView/calc2";
	}
	
	@PostMapping("input4")
	public String input4(@ModelAttribute Cal c) 
	{
		log.debug("객체값:{}", c);
		return "redirect:/";
	}
	
	@GetMapping("calc3")
	public String calc3() {
		return "calcView/calc3";
	}
	
	@PostMapping("calc3")
	public String calcOutput1(
			@ModelAttribute CalcDTO dto,
			Model model) 
	
	{
	int res = 0;
		try {	
				switch (dto.getOp()) {
					case "+": res = dto.getNum1() + dto.getNum2();
					break;

					case "-": res = dto.getNum1() - dto.getNum2();
					break;

					case "*": res = dto.getNum1() * dto.getNum2();
					break;
          
					case "/": res = dto.getNum1() / dto.getNum2();
					break;
			
					default : throw new Exception("연산자 오류"); 
				}
			model.addAttribute("calc", dto);
			model.addAttribute("res", res);
			}
			catch (Exception e) {
				e.printStackTrace();
				return "ex/calc3"; 
				//예외 발생시 계산 폼으로 다시 이동
			}
			return "ex/calcOutput1";
	}
	
	@GetMapping("calc4")
	public String calc4() {
		return "calcView/calc4";
	}
	
	@PostMapping("calc4")
	public String calcOutput2(
			@ModelAttribute CalcDTO dto,
			Model model) {
	
		// 전달받은 값을 서비스로 전달
		// 서비스가 리턴한 값을 모델에 저장하고 포워딩
			return "ex/calcOutput2";
	}
	
	

}
